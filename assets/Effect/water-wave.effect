// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }

}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <cc-global>
  #include <texture>
  #define M_PI 3.14159265358979323846
  #define MAX_ARR_LEN 6

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform Properties {
    vec4 colors[MAX_ARR_LEN];
    vec4 heights[MAX_ARR_LEN];
    
    vec2 iResolution;          //节点分辨率
    float skewAngle;           //倾斜角度
    float waveType;
  };

  //将一个点，以center为中心，旋转angle度
  vec2 tranPt(vec2 uv,float angle,vec2 center){ 
    float c = cos(angle);
    float s = sin(angle);
    float Ox = center.x;
    float Oy = center.y;
    mat3 m = mat3(
          c,0.0-s,(1.0-c)*Ox+s*Oy,
          s,c,(1.0-c)*Oy-s*Ox,
          0.0,0.0,1.0
    );
    vec3 ret = m*vec3(uv.x,uv.y,0.0);
    return ret.xy; 
  }

  //根据倾斜角度，模拟固定体积的水（假定杯子为长方形，有一定的误差）
  //_height水占杯子的高度，从下往上算【0,1】
  float drawWater(vec2 uv,float angle,float _height,int arrSize,int curIdx)
  {
    float ratio = iResolution.y/iResolution.x;
    bool toLeft = sin(angle)>=0.0;
    vec2 center = vec2(0.5,1.0-_height);//水面倾斜时，以哪个店为中心店

    float _t = abs(tan(angle));
    if(_height<0.5){//水的体积小于杯子的一半,先碰到下瓶底
      bool is_bottom = _t/ratio>2.0*_height;//倾斜角度达到瓶底
      if(is_bottom){
        center.x = sqrt(2.0*_height/_t*ratio)/2.0;
        center.y = 1.0 - sqrt(2.0*_height*_t/ratio)/2.0;

        bool is_top = _t>(ratio)/(_height*2.0);//倾斜角度达到瓶口
        if(is_top){
          center.y = 0.5;
          center.x = _height;
        }
      }
      if(!toLeft){
        center.x = 1.0-center.x;
      }
    }else{//水比较多，先碰到上瓶底
      bool is_top = _t>2.0*ratio*(1.0-_height);
      if(is_top){
        center.x = sqrt(2.0*ratio*(1.0-_height)/_t)/2.0;
        center.y = sqrt(2.0*ratio*(1.0-_height)*_t)/2.0/ratio;

        bool is_bottom = _t>ratio/(2.0*(1.0-_height));
        if(is_bottom){
          center.y = 0.5;
          center.x = 1.0-_height;
        }
      }

      if(toLeft){
        center.x = 1.0-center.x;
      }
    }
    
    uv.y = uv.y*ratio;
    uv -= vec2(center.x,center.y*ratio);
    
    vec2 uv1 = tranPt(uv,angle,vec2(0.0));
    
    float y = 0.0;

    bool hasWave = curIdx==arrSize-1;//只有最上面一层有波浪
    hasWave = hasWave;
    if(hasWave){
      // 代入正弦曲线公式计算模拟水面波浪 y = Asin(ωx ± φ)
      float amplitude = 0.0;// 振幅（控制波浪顶端和底端的高度）
      float angularVelocity = 0.0;// 角速度（控制波浪的周期）
      float frequency = 0.0;// 频率（控制波浪移动的速度）
      if(abs(waveType-1.0)<0.01){//往里倒水
        amplitude = 0.06;
        angularVelocity = 10.0;
        frequency = 10.0;
      }else if(abs(waveType-2.0)<0.01){//往外倒水
        amplitude = 0.03;
        angularVelocity = 5.0;
        frequency = 6.0;
      }
      
      y = amplitude * sin((angularVelocity * uv1.x) + (frequency * cc_time.x)*(toLeft ? 1. : -1.));
    }
        
    //只绘制起点和终点之间
    float alpha = (uv1.y > y) ? 1.0 : 0.0;

    // 输出到屏幕
    return alpha;
  }

  void main () {
    // 保存顶点颜色
    vec4 ret = vec4(1.0,1.0,1.0,1.0);

    // 叠加纹理颜色
    ret *= texture(texture, v_uv0);

    // 直接丢弃原本就透明的像素
    if(ret.a == 0.0){
      discard;
    }

    float angle = mod(skewAngle,360.0) * M_PI / 180.0;

    vec2 uv = vec2(v_uv0);
    float a = 0.0;
    float _height = 0.0;

    int size = 0;
    for(int i=0;i<MAX_ARR_LEN;i++){
      if(heights[i].x<0.001){
        continue;
      }
      size++;
    }
    //从最下面一层开始绘制
    for(int i=0;i<MAX_ARR_LEN;i++){
      if(heights[i].x<0.001){
        continue;
      }
      _height+=heights[i].x;
      a += drawWater(uv,angle,_height,size,i);
      if(a>0.0){//绘制过的，跳过
          ret *= a*colors[i]; 
          break;
      }
    }
    if(a<0.001){
      discard;
    }
    // 输出颜色
    gl_FragColor = ret;
  }
}%
